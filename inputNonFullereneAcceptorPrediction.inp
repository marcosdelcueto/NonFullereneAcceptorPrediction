#######################################
### File containing input options for MLPhotovoltaics.py
### The name of this file can be changed, but then also need to update 'input_file_name' in ML_d_a.py
### Lines that start with '#' are ignored. All comments after '#' are ignored. Empty lines are ignored
### Options can be in any order
#######################################
#######################################
########## Parallelization ############
#######################################
NCPU = 1                              # select number of CPUs (-1 means all CPUs in a node) (ONLY USED IF "optimize_hyperparams = True")
#######################################
############ Verbose options ##########
#######################################
print_log = True                	     # choose whether information is also written into a log file (Default: True)
log_name  = 'log_NonFullereneAcceptorPrediction.log' # name of log file
print_progress_every_x_percent =  10  # print progress in standard output at different interval
#######################################
######### Data base options ###########
#######################################
## Any number of electronic (physical) descriptors can be specified, classified in any number of groups. Use notation: xcols_elec0, xcols_elec1 etc.
## Each of these groups can contain any number of descriptors, but the total number of groups should be the same as
## the length of 'gamma_el' and 'gamma_el_lim', specified in 'Machine Learning Algorithm options'. Each of these gammas
## controls the weight of each group of descriptors
#######################################
db_file = 'database.csv'              # name of input file with database
Ndata =  566                          # number of d/a pairs
xcols_struc = ["SMILES-DFP","SMILES-AFP"]                    # name of descriptors that will be affected by gamma_d and gamma_a, respectively
xcols_elec0 = ["HOMO-D","LUMO-D","LUMO-A","Reor-D","Reor-A","sum of f-D","sum of f-A","XLOGP3-D","XLOGP3-A"] # name of descriptors affected by gamma_el[0]
#xcols_elec1 = ["sum of f-D", "sum of f-A"]                  # name of descriptors affected by gamma_el[1]
#xcols_elec2 = ["XLOGP3-D","XLOGP3-A"]                       # name of descriptors affected by gamma_el[2]
ycols = [ "PCE" ]               	     # name of target property
FP_length = 2048						     # number of entries of each fingerprint
predict_unknown = False               # select if test configurations have unknown PCE (Default: False)
#######################################
####### Output prediction csv #########
#######################################
prediction_csv_file_name = 'pred.csv' # Select None if no output prediction csv is wanted
columns_labels_prediction_csv = []    # Select extra labels to print in output prediction csv
#######################################
# Machine Learning Algorithm options ##
#######################################
plot_target_predictions = None		  # decide filename for graph plotting predicted and actual values of target property. If None, it is not plotted
ML = 'KRR'                            # 'kNN' or 'KRR' or 'SVR'
### Cross validation ##################
CV = 'groups'                         # select 'loo' or 'kf' or 'groups' or 'last'
kfold = 5                             # only used if CV=kf
Nlast = 85									  # only used if CV='last'
acceptor_label_column = "ACCEPTORNo"
groups_acceptor_labels = [[13,15,20,21,28,33],[1,8,9,12,16,18,19],[3,4,5,6],[2,4,6,10,11,29,30],[17,22,24,25,26,27],[23,31,32],[14,29,30],[7,17,26],[7,29,30]]
group_test = 7                        # group chosen as test group. Note that groups start at 0, 1, 2, 3, 4...
### General hyperparameters ###########
optimize_hyperparams = False   		  # whether hyperparameters are optimized (True) or just use initial values (False). If gamma_X=0.0, then that hyperparam is not optimized anyway
gamma_el = [1.0]		  					  # hyperparameters with weights of d_el
gamma_d  = 2.0         					  # hyperparameter with weight of d_fp_d
gamma_a  = 3.0      	  					  # hyperparameter with weight of d_fp_a
gamma_el_lim = [(0.0,1.0)] 		     # range in which each gamma_el is optimized
gamma_d_lim  = (0.0, 6.0)         	  # range in which gamma_d is optimized
gamma_a_lim  = (0.0, 6.0)         	  # range in which gamma_a is optimized
weight_RMSE = 'linear'                # select one: 'linear', 'PCE', 'PCE2'. Default: 'linear'
### k-Nearest Neighbors ('kNN') #######
Neighbors = [3] 							  # number of nearest-neighbors
plot_kNN_distances = None 				  # decide filename for graph of kNN-distances vs rmse at each CV step is printed. If None, it is not plotted
### Kernel Ridge Regression ('KRR') ###
alpha = 0.101405                      # kernel hyperparameter
alpha_lim  = (0.00, 10.00)         	  # range in which alpha hyperparam is optimized
### Support Vector Regression ('SVR')##
C = 0.11936879110802057               # regularization hyperparameter
epsilon = 0.00021621466332921724      # epsilon-SVR
C_lim = (0.00,0.1)                    # range in which C is optimized
epsilon_lim = (0.00,0.5)        	     # range in which epsilon is optimized
#######################################
